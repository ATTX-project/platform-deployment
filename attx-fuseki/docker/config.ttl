@prefix :        <#> .
@prefix fuseki:  <http://jena.apache.org/fuseki#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix tdb:     <http://jena.hpl.hp.com/2008/tdb#> .
@prefix ja:      <http://jena.hpl.hp.com/2005/11/Assembler#> .
@prefix dc:      <http://purl.org/dc/elements/1.1/> .

<>  rdfs:comment     "ATTX Graph Store specification for Fuseki" ;
    dc:creator       "ATTX Project" ;
    dc:title         "ATTX Graph Store" ;
    dc:description   "ATTX Graph Store specification with associated endpoints for test and development serivces" ;
    dc:date          "2017-02-21" ;
    dc:format        "RDF" ;
    .

[] rdf:type fuseki:Server ;
    fuseki:services (
     <#service_prod>
    ) .

# TDB loader configuration
[] ja:loadClass "org.apache.jena.tdb.TDB" .
tdb:DatasetTDB  rdfs:subClassOf  ja:RDFDataset .
tdb:GraphTDB    rdfs:subClassOf  ja:Model .

# Development service endpoint for Use-case Data.
# Recommended would be to split this into 2 services one for query with the inferenced dataset and one for update.
<#service_prod> rdf:type fuseki:Service ;
    rdfs:label                        "TDB Service" ;
    fuseki:name                       "ds" ;       # http://host:port/ds
    fuseki:serviceQuery               "sparql" ;   # SPARQL query service
    fuseki:serviceQuery               "query" ;    # SPARQL query service (alt name)
    fuseki:serviceUpdate              "update" ;   # SPARQL update service
    fuseki:serviceUpload              "upload" ;   # Non-SPARQL upload service
    fuseki:serviceReadWriteGraphStore "data" ;     # SPARQL Graph store protocol (read and write)
    # A separate read-only graph store endpoint:
    fuseki:serviceReadGraphStore      "get" ;      # SPARQL Graph store protocol (read only)
    fuseki:dataset                    <#dataset> ;
    .

  #  http://data.hulib.helsinki.fi/attx - to be used as a base for data


<#dataset> rdf:type ja:RDFDataset ;
    ja:defaultGraph <#default> ;
    ja:namedGraph
        [ ja:graphName      <http://data.hulib.helsinki.fi/attx/onto> ;
          ja:graph          <#attx-ontodb>;
        ] ;
.

<#tdb_prod_dataset> rdf:type tdb:DatasetTDB ;

    tdb:location "/tmp/" ;
    ## Query timeout on this dataset (milliseconds)
    ja:context [ ja:cxtName "arq:queryTimeout" ;  ja:cxtValue "30000" ] ;
    ## Default graph for query is the (read-only) union of all named graphs.
    tdb:unionDefaultGraph true ;

.

<#default> rdf:type tdb:GraphTDB ;
    tdb:dataset <#tdb_prod_dataset> ;
    .

<#attx-ontodb> rdf:type ja:OntModel ;
    tdb:dataset <#tdb_prod_dataset> ;
    ja:initialContent <#attx-onto> ;
    .


# Data
<#attx-onto> ja:externalContent <file:data/attx-onto.ttl>  .

# # Something more complex where the UnionGraph would be materialized in the default graph
# <#attx> rdf:type ja:UnionModel ;
#   ja:rootModel <#default>;
#   ja:subModel <#attx-ids>;
#   ja:initialContent <#attx-onto> ;
#   .
# <#attx-ids> rdf:type ja:MemoryModel ;
#   tdb:dataset <#tdb_prod_dataset> ;
#   tdb:graphName <http://data.hulib.helsinki.fi/attx/ids> ;
#   .
