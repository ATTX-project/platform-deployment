apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext.src = [
    "${artifactRepoURL}/restServices/archivaServices/searchService/artifact?g=org.uh.hulib.attx.wc&a=uv-dpu-t-attx-metadata&v=${attxMetadataPlugin}&p=jar":"uv-dpu-t-attx-metadata-${attxMetadataPlugin}.jar"
]

import de.undercouch.gradle.tasks.download.Download
task downloadMETADPUFile

for (s in src) {
    task "downloadMETADPUFile_${s.key.hashCode()}"(type: Download) {
        src s.key
        dest new File("$projectDir", s.value)
    }
    downloadMETADPUFile.dependsOn("downloadMETADPUFile_${s.key.hashCode()}")
}

// These parameters should be set before the tests are run,
// if there different combinations need to be tested

ext {
    testImageWF = "latest"
    testImageGM = "latest"
    testImageFuseki = "latest"
    testImageESSiren = "latest"
    testImageUVShared = "latest"
    testImageATTXDPUs = "feature-pd-uc1"
}

dependencies {
    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0'
}

dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {}

    shared {
        forcePull = true
        forceRemoveImage = true
        // image = 'tenforce/unified-views-shared:latest'
        image = "${imageRepo}:${imageRepoPort}/uv-attx-shared:${testImageUVShared}"
    }

    mysql {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-mariadb:feat-compact-modular'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
        portBindings = ['3306:3306']
    }

    backend {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-backend:latest'
        volumesFrom =  [shared]
        dependsOn = [mysql, shared]
        links = [mysql.link()]
    }

    frontend {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-frontend:latest'
        volumesFrom = [shared]
        exposedPorts = ['8080']
        portBindings = ['8080:8080']
        dependsOn = [backend, mysql, shared]
        links = [mysql.link(), backend.link()]
    }

    // uvdpus {
    //     forcePull = true
    //     forceRemoveImage = true
    //     image = 'tenforce/unified-views-add-dpus:feat-compact-modular'
    //     dependsOn = [mysql]
    // }


    wfapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/wf-api:${testImageWF}"
        exposedPorts = ['4301']
        portBindings = ['4301:4301']
        links = [mysql.link()]
        dependsOn = [mysql]
    }

    fuseki {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-fuseki:${testImageFuseki}"
        exposedPorts = ['3030']
        portBindings = ['3030:3030']
        env = ['ADMIN_PASSWORD=pw123']
    }

    essiren {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/essiren:${testImageESSiren}"
        exposedPorts = ['9200', '9300']
        portBindings = ['9200:9200', '9300:9300']
    }

    gmapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/gm-api:${testImageGM}"
        exposedPorts = ['4302']
        portBindings = ['4302:4302']
        links = [fuseki.link(), wfapi.link(), essiren.link()]
    }

    attxdpus {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-attx-dpus:${testImageATTXDPUs}"
        links = [frontend.link()]
        dependsOn = [frontend, mysql]
    }

    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'
        buildArgs = ['METADATA_DPU': "$attxMetadataPlugin"]
        binds = ["/var/run/docker.sock:/run/docker.sock"]
        command = ['sh', '-c', '/tmp/runTests.sh']
        dependsOn = [gmapi, essiren, fuseki, wfapi, shared, frontend, backend, attxdpus]
        waitForCommand = true
        forceRemoveImage = true
    }
}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test
    containerPath = '/tmp/build/reports'
    destinationDir = file("build/from-container/")
    cleanDestinationDir = false
}

startTestContainer.finalizedBy copyReportFiles

// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn downloadMETADPUFile
buildTestImage.dependsOn shadowJar
buildTestImage.dependsOn processTestResources
buildTestImage.dependsOn testClasses


shadowJar {
    classifier = 'tests'
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
}

task integTest {
    dependsOn startTestContainer
    finalizedBy removeImages
}
