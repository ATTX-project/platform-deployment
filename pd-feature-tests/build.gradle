apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer

repositories {
    mavenCentral()
    maven { url "${artifactRepoURL}/repository/attx-releases"}
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'



dependencies {
    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0',
        'org.awaitility:awaitility-groovy:2.0.0',
        'org.uh.hulib.attx.dev:dev-test-helper:1.4'
}


ext.src = [
    "${artifactRepoURL}/restServices/archivaServices/searchService/artifact?g=org.uh.hulib.attx.dev&a=dev-test-helper&v=${attxTestHelperPlugin}&p=jar":"dev-test-helper-${attxTestHelperPlugin}.jar"
]

import de.undercouch.gradle.tasks.download.Download
task downloadTestFiles

for (s in src) {
    task "downloadTestFiles_${s.key.hashCode()}"(type: Download) {
        src s.key
        dest new File("$projectDir", s.value)
    }
    downloadTestFiles.dependsOn("downloadTestFiles_${s.key.hashCode()}")
}

if (!project.hasProperty("testEnv") || project.testEnv == "dev") {
    ext.testSet = "localhost"
} else if (project.testEnv == "CI"){
    ext.testSet = "container"
} else {
    throw new GradleException("Build project environment option not recognised.")
}

// These parameters should be set before the tests are run,
// if there different combinations need to be tested

ext {
    testImageUVProv = "latest"
    testImageGM = "latest"
    testImageFuseki = "latest"
    testImageES5 = "latest"
    testImageESSiren = "latest"
    testImageATTXDPUs = "latest"
}


dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {
        // no user/pass
    }
    networks {
        pdTest
    }
    shared {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-shared:stable-1.2'
        networks = [pdTest]
    }

    mysql {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-mariadb:stable-1.2'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
        networks = [pdTest]
        hostName = 'mysql'
        if (testSet == "localhost") {
            portBindings = ['3306:3306']
        }
    }
    backend {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-backend:stable-1.2'
        volumesFrom =  [shared]
        dependsOn = [mysql, shared]
        networks = [pdTest]
    }

    frontend {
        forcePull = true
        forceRemoveImage = true
        image = 'attxproject/unified-views-frontend:stable-1.2'
        volumesFrom = [shared]
        dependsOn = [backend, shared]
        networks = [pdTest]
        hostName = 'frontend'
        if (testSet == "localhost") {
            portBindings = ['8080:8080']
        }
    }

    attxdpus {
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-attx-dpus:${testImageATTXDPUs}"
        links = [frontend.link(), mysql.link(), backend.link()]
        dependsOn = [mysql, backend, frontend]
        networks = [pdTest]
    }

    fuseki {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-fuseki:${testImageFuseki}"
        networks = [pdTest]
        hostName = 'fuseki'
        if (testSet == "localhost") {
            portBindings = ['3030:3030']
        }
        env = ['ADMIN_PASSWORD=pw123']
    }

    essiren {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/essiren:${testImageESSiren}"
        networks = [pdTest]
        hostName = 'essiren'
        if (testSet == "localhost") {
            portBindings = ['9200:9200', '9300:9300']
        }
    }

    es5 {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-es5:${testImageES5}"
        networks = [pdTest]
        hostName = 'es5'
        if (testSet == "localhost") {
            portBindings = ['9210:9210', '9310:9310']
        }
    }

    wfapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-prov:${testImageUVProv}"
        dependsOn = [mysql]
        networks = [pdTest]
        hostName = 'wfapi'
        if (testSet == "localhost") {
            portBindings = ['4301:4301']
        }
    }

    gmapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/gm-api:${testImageGM}"
        dependsOn = [frontend, backend, shared, attxdpus, mysql, wfapi, essiren, fuseki, es5]
        networks = [pdTest]
        hostName = 'gmapi'
        if (testSet == "localhost") {
            portBindings = ['4302:4302']
        }
    }

    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'
        buildArgs = ['METADATA_DPU': "", 'attxTestHelperPlugin': "$attxTestHelperPlugin"]
        env = ["REPO=$artifactRepoURL"]
        if (testSet == "container") {
            binds = ["/var/run/docker.sock:/run/docker.sock"]
        }
        dependsOn = [gmapi] // This dependency is not really needed however it reminds the scope of the tests.
        command = ['sh', '-c', '/tmp/runTests.sh']
        waitForCommand = true
        forceRemoveImage = true
        attachStdout = true
        attachStderr = true
        networks = [pdTest]
    }
}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test
    containerPath = '/tmp/build/reports/tests'
    destinationDir = file("build/reports/")
    cleanDestinationDir = false
    dependsOn startTestContainer
}

startTestContainer.finalizedBy copyReportFiles

shadowJar {
    classifier = 'tests'
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
}

// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn downloadTestFiles
buildTestImage.dependsOn shadowJar
buildTestImage.dependsOn testClasses
buildTestImage.dependsOn processTestResources

task checkDPUDone(type: DockerWaitContainer) {
    dependsOn startGmapiContainer
    targetContainerId {dcompose.attxdpus.containerId}
    doLast{
        if(getExitCode() != 0) {
            println "ATTX DPU Container failed with exit code \${getExitCode()}"
        } else {
            println "Everything is peachy."
        }
    }
}

startTestContainer.dependsOn checkDPUDone

task runContainerTests {
    dependsOn startTestContainer
    finalizedBy removeImages
    doLast {
        if(dcompose.test.exitCode != 0){ throw new GradleException("Tests within the container Failed!") }
    }
}

// TO DO: find a fix so we can run the test locally preferably while waiting for other stuff to be there. MYSQL is the one that we need to wait for.

task runIntegTests(type: Test) {
    dependsOn checkDPUDone

    doFirst {
        systemProperty 'frontend.port', dcompose.frontend.findHostPort(8080)
        systemProperty 'frontend.host', dcompose.frontend.dockerHost
        systemProperty 'wfapi.port', dcompose.uvprov.findHostPort(4301)
        systemProperty 'wfapi.host', dcompose.uvprov.dockerHost
        systemProperty 'fuseki.port', dcompose.fuseki.findHostPort(3030)
        systemProperty 'fuseki.host', dcompose.fuseki.dockerHost
        systemProperty 'gmapi.port', dcompose.gmapi.findHostPort(4302)
        systemProperty 'gmapi.host', dcompose.gmapi.dockerHost
        systemProperty 'essiren.port', dcompose.essiren.findHostPort(9200)
        systemProperty 'essiren.tcp', dcompose.essiren.findHostPort(9300)
        systemProperty 'essiren.host', dcompose.essiren.dockerHost
        systemProperty 'es5.port', dcompose.es5.findHostPort(9210)
        systemProperty 'es5.host', dcompose.es5.dockerHost
    }
    doLast {
        systemProperties.remove 'frontend.port'
        systemProperties.remove 'frontend.host'
        systemProperties.remove 'wfapi.port'
        systemProperties.remove 'wfapi.host'
        systemProperties.remove 'fuseki.port'
        systemProperties.remove 'fuseki.host'
        systemProperties.remove 'gmapi.port'
        systemProperties.remove 'gmapi.host'
        systemProperties.remove 'essiren.port'
        systemProperties.remove 'essiren.tcp'
        systemProperties.remove 'essiren.host'
        systemProperties.remove 'es5.port'
        systemProperties.remove 'es5.host'
    }
    finalizedBy removeImages
}
