apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

ext {
    test_WFImage_version = "latest"
    test_GMImage_version = "latest"
    test_FusekiImage_version = "latest"
    test_ESSirenImage_version = "latest"
    test_UVSharedImage_version = "latest"
}

dependencies {
    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0'
}

dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {}

    shared {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-attx-shared:${test_UVSharedImage_version}"
    }

    mysql {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-mariadb:feat-compact-modular'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
        portBindings = ['3306:3306']
    }

    backend {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-backend:latest'
        volumesFrom =  [shared]
        dependsOn = [mysql, shared]
    }

    uvdpus {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-add-dpus'
        dependsOn = [mysql]
    }

    frontend {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-frontend:latest'
        volumesFrom = [shared]
        exposedPorts = ['8080']
        portBindings = ['8080:8080']
        dependsOn = [backend, shared]
    }

    wfapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/wf-api:${test_WFImage_version}"
        exposedPorts = ['4301']
        portBindings = ['4301:4301']
        dependsOn = [mysql]
    }

    fuseki {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-fuseki:${test_FusekiImage_version}"
        exposedPorts = ['3030']
        portBindings = ['3030:3030']
        env = ['ADMIN_PASSWORD=pw123']
    }

    essiren {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/essiren:${test_ESSirenImage_version}"
        exposedPorts = ['9200', '9300']
        portBindings = ['9200:9200', '9300:9300']
    }

    gmapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/gm-api:${test_GMImage_version}"
        exposedPorts = ['4302']
        portBindings = ['4302:4302']
    }

    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'
        binds = ["/var/run/docker.sock:/run/docker.sock"]
        command = ['sh', '-c', '/tmp/runTests.sh']
        dependsOn = [gmapi, essiren, fuseki, wfapi, frontend, backend, shared]
        waitForCommand = true
        forceRemoveImage = true
    }
}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test
    containerPath = '/tmp/build/reports'
    destinationDir = file("build/from-container/")
    cleanDestinationDir = false
}

startTestContainer.finalizedBy copyReportFiles

// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn shadowJar
buildTestImage.dependsOn testClasses


shadowJar {
    classifier = 'tests'
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
}

task integTest {
    dependsOn startTestContainer
    finalizedBy removeImages
}
