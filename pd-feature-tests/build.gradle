plugins {
    id "com.github.johnrengelman.shadow" version "1.2.4"
}

apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0'
    
    
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    
    
}

dcompose {
    createComposeFile.useTags = true    
    registry ('http://attx-dev:5000') {}
    registry ('http://attx-dev.hulib.helsinki.fi:5000') {}  
     
    shared {
        image = 'attx-dev.hulib.helsinki.fi:5000/uv-attx-shared'
    }
    frontend {
        image = 'tenforce/unified-views-frontend:latest'
        volumesFrom = [shared]
        exposedPorts = ['8080']
        portBindings = ['8080:8080']            
        
    }
    mysql {
        image = 'tenforce/unified-views-mariadb:latest'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
    }
    backend {
        image = 'tenforce/unified-views-backend:latest'
        volumesFrom =  [shared]
    }
    uvdpus {
        image = 'tenforce/unified-views-add-dpus'
        dependsOn = [mysql]
    }      
    wfapi {
        image = 'attx-dev.hulib.helsinki.fi:5000/wf-api:latest'
    }     
    
    fuseki {
        image = 'stain/jena-fuseki'
        exposedPorts = ['3030']
        portBindings = ['3030:3030']
    }   
    essiren {
        image = 'attx-dev.hulib.helsinki.fi:5000/essiren:latest'
        exposedPorts = ['9200', '9300']
        portBindings = ['9200:9200', '9300:9300']            
    }   
    gmapi {
        image = 'attx-dev.hulib.helsinki.fi:5000/gm-api:latest'
        exposedPorts = ['4302']
        portBindings = ['4302:4302']            
        
    }    
    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'        
        binds = ["/var/run/docker.sock:/run/docker.sock"]
        command = ['sh', '-c', '/tmp/runTests.sh']
        dependsOn = [gmapi, essiren, fuseki, wfapi, frontend, backend, shared]
        waitForCommand = true
    }
    

}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test       
    containerPath = '/tmp/build/reports'
    destinationDir = file("build/from-container/")
    cleanDestinationDir = false  
}

startTestContainer.finalizedBy('copyReportFiles')

// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn('shadowJar')
buildTestImage.dependsOn('testClasses')


shadowJar {
  classifier = 'tests'
  from sourceSets.test.output
  configurations = [project.configurations.testRuntime]
}