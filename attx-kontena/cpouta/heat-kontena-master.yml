heat_template_version: 2013-05-23

description: >
  Heat template to setup Kontena master

# No dynamicity at this point
parameters:
  key_name:
    type: string
    default: Cpouta Test
    # replace above with your key pair name as per: https://pouta.csc.fi/dashboard/project/access_and_security/
  az:
    type: string
    default: nova
    #: above should be nova
  public_network:
    type: string
    default: project_2000561
    # replace the above with your projectname / tenant name e.g project_2000561
  public_ip_pool:
    type: string
    default: public
    # above should be public
  name:
    type: string
    default: kontena-master
    # this can stay as kontena-master
  volume_size:
    type: number
    default: 20
  image:
    type: string
    default: CoreOS
  kontena_version:
    type: string
    default: latest

resources:
  initial_admin_code:
    type: OS::Heat::RandomString
    properties:
      length: 20

  vault_key:
    type: OS::Heat::RandomString
    properties:
      length: 64

  vault_iv:
    type: OS::Heat::RandomString
    properties:
      length: 64

  master_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
      #cloud-config
        write_files:
          - path: /etc/kontena-server.env
            permissions: 600
            owner: root
            content:
              str_replace:
                params:
                  __kontena_version__: {get_param: kontena_version}
                  __initial_admin_code__: {get_resource: initial_admin_code}
                  __vault_key__: {get_resource: vault_key}
                  __vault_iv__: {get_resource: vault_iv}
                template: |
                  KONTENA_VERSION=__kontena_version__
                  SSL_CERT="/etc/kontena-server.pem"
                  VAULT_KEY=__vault_key__
                  VAULT_IV=__vault_iv__
                  INITIAL_ADMIN_CODE=__initial_admin_code__

          - path: /etc/kontena-server.pem
            permissions: 600
            owner: root
            content:
              get_file: kontena_master.pem
              #Chris: This needs to be on your local machine in the directory thta you are running the openstack create stack from.

          - path: /opt/bin/kontena-haproxy.sh
            permissions: 755
            owner: root
            content: |
              #!/bin/sh
              if [ -n "$SSL_CERT" ]; then
                SSL_CERT=$(awk 1 ORS='\\n' $SSL_CERT)
              else
                SSL_CERT="**None**"
              fi
              /usr/bin/docker run --name=kontena-server-haproxy \
                --link kontena-server-api:kontena-server-api \
                -e SSL_CERT="$SSL_CERT" -e BACKEND_PORT=9292 \
                -p 8080:80 -p 8443:443 kontena/haproxy:latest
        coreos:
          units:
            - name: mkfs-vdb.service
              command: start
              content: |
                [Unit]
                Description=Create ext4 fs on /dev/vdb
                Before=docker.service var-lib-docker.mount
                ConditionPathExists=!/var/lib/docker
                After=dev-vdb.device
                Requires=dev-vdb.device
                [Service]
                Type=oneshot
                RemainAfterExit=yes
                ExecStart=/usr/sbin/mkfs.ext4 /dev/vdb
            - name: var-lib-docker.mount
              command: start
              content: |
                [Unit]
                Description=Mount ephemeral to /var/lib/docker
                Before=docker.service
                Requires=mkfs-vdb.service
                After=mkfs-vdb.service
                [Mount]
                What=/dev/vdb
                Where=/var/lib/docker
                Type=ext4
            - name: kontena-server-mongo.service
              command: start
              enable: true
              content: |
                [Unit]
                Description=kontena-server-mongo
                After=network-online.target
                After=docker.service
                Description=Kontena Server MongoDB
                Documentation=http://www.mongodb.org/
                Requires=network-online.target
                Requires=docker.service

                [Service]
                Restart=always
                RestartSec=5
                ExecStartPre=/usr/bin/docker pull mongo:3.0
                ExecStartPre=-/usr/bin/docker create --name=kontena-server-mongo-data mongo:3.0
                ExecStartPre=-/usr/bin/docker stop kontena-server-mongo
                ExecStartPre=-/usr/bin/docker rm kontena-server-mongo
                ExecStart=/usr/bin/docker run --name=kontena-server-mongo \
                    --volumes-from=kontena-server-mongo-data \
                    mongo:3.0 mongod --smallfiles

            - name: kontena-server-api.service
              command: start
              enable: true
              content: |
                [Unit]
                Description=kontena-server-api
                After=network-online.target
                After=docker.service
                Description=Kontena Agent
                Documentation=http://www.kontena.io/
                Requires=network-online.target
                Requires=docker.service

                [Service]
                Restart=always
                RestartSec=5
                EnvironmentFile=/etc/kontena-server.env
                ExecStartPre=-/usr/bin/docker stop kontena-server-api
                ExecStartPre=-/usr/bin/docker rm kontena-server-api
                ExecStartPre=/usr/bin/docker pull kontena/server:${KONTENA_VERSION}
                ExecStart=/usr/bin/docker run --name kontena-server-api \
                    --link kontena-server-mongo:mongodb \
                    -e MONGODB_URI=mongodb://mongodb:27017/kontena_server \
                    -e VAULT_KEY=${VAULT_KEY} -e VAULT_IV=${VAULT_IV} \
                    -e INITIAL_ADMIN_CODE=${INITIAL_ADMIN_CODE} \
                    kontena/server:${KONTENA_VERSION}

            - name: kontena-server-haproxy.service
              command: start
              enable: true
              content: |
                [Unit]
                Description=kontena-server-haproxy
                After=network-online.target
                After=docker.service
                Description=Kontena Server HAProxy
                Documentation=http://www.kontena.io/
                Requires=network-online.target
                Requires=docker.service

                [Service]
                Restart=always
                RestartSec=5
                EnvironmentFile=/etc/kontena-server.env
                ExecStartPre=-/usr/bin/docker stop kontena-server-haproxy
                ExecStartPre=-/usr/bin/docker rm kontena-server-haproxy
                ExecStartPre=/usr/bin/docker pull kontena/haproxy:latest
                ExecStart=/opt/bin/kontena-haproxy.sh

  master_public_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: {get_param: public_ip_pool}

  master_volume:
    type: OS::Cinder::Volume
    properties:
      name  : "Kontena Master - Docker Disk"
      size  : {get_param: volume_size}
      availability_zone: {get_param: az}
      volume_type: "standard"

  master_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: "Security group for the master"
      name: {get_param: name}
      rules: [{"direction": "ingress","port_range_max": 8443, "remote_mode": "remote_ip_prefix", "protocol": "TCP", "remote_ip_prefix": "0.0.0.0/0", "ethertype": "IPv4", "port_range_min": 8443},{"direction": "ingress","port_range_max": 22, "remote_mode": "remote_ip_prefix", "protocol": "TCP", "remote_ip_prefix": "0.0.0.0/0", "ethertype": "IPv4", "port_range_min": 22}]

  volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      volume_id: { get_resource: master_volume }
      instance_uuid: { get_resource: kontena_master }
      mountpoint: "/dev/vdb"

  kontena_master:
    type: OS::Nova::Server
    properties:
      name: {get_param: name}
      image: {get_param: image}
      flavor: standard.tiny
      availability_zone: {get_param: az}
      key_name: {get_param: key_name}
      security_groups: [{ get_resource: master_security_group }]
      user_data_format: RAW
      user_data:
        get_resource: master_init
      networks:
        - network:  {get_param: public_network}

  association:
     type: OS::Nova::FloatingIPAssociation
     properties:
       floating_ip: { get_resource: master_public_ip }
       server_id: { get_resource: kontena_master }
outputs:
  master_public_ip:
    description: IP address of the Kontena master
    value: { get_attr: [kontena_master, networks] }
  initial_admin_code:
    description: Initial admin code
    value: { get_resource: initial_admin_code }
